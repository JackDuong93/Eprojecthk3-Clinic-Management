// <auto-generated />
using System;
using ClinicManagement_hk3.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ClinicManagement_hk3.Migrations
{
    [DbContext(typeof(Projecthk3Context))]
    partial class Projecthk3ContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("ClinicManagement_hk3.Models.Account", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("FullName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PassWord")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int?>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("State")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("UserName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("UserId")
                        .HasName("PK__Accounts__1788CC4C1298D693");

                    b.HasIndex("RoleId");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("ClinicManagement_hk3.Models.Drug", b =>
                {
                    b.Property<int>("DrugId")
                        .HasColumnType("int");

                    b.Property<int?>("CateId")
                        .HasColumnType("int");

                    b.Property<decimal?>("Cost")
                        .HasColumnType("decimal(18,0)");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("DrugName")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("Image")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("Ingredients")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("NetWeight")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Note")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("Original")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(18,0)");

                    b.Property<string>("ProductCode")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("UserManual")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("Warning")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.HasKey("DrugId");

                    b.HasIndex("CateId");

                    b.ToTable("Drug", (string)null);
                });

            modelBuilder.Entity("ClinicManagement_hk3.Models.DrugCategory", b =>
                {
                    b.Property<int>("CateId")
                        .HasColumnType("int");

                    b.Property<string>("CateName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("CateId")
                        .HasName("PK__DrugCate__27638D14396DD6B1");

                    b.ToTable("DrugCategory", (string)null);
                });

            modelBuilder.Entity("ClinicManagement_hk3.Models.Education", b =>
                {
                    b.Property<int>("EduId")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("StartTime")
                        .HasColumnType("datetime");

                    b.Property<string>("Title")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("EduId")
                        .HasName("PK__Educatio__1FD9490E804A404E");

                    b.HasIndex("UserId");

                    b.ToTable("Education", (string)null);
                });

            modelBuilder.Entity("ClinicManagement_hk3.Models.EduDetail", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int?>("EduId")
                        .HasColumnType("int");

                    b.Property<int?>("StaffId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EduId");

                    b.HasIndex("StaffId");

                    b.ToTable("EduDetail", (string)null);
                });

            modelBuilder.Entity("ClinicManagement_hk3.Models.Feedback", b =>
                {
                    b.Property<int>("FeedbackId")
                        .HasColumnType("int");

                    b.Property<int?>("AccountUserId")
                        .HasColumnType("int");

                    b.Property<string>("FbInfo")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1)");

                    b.Property<DateTime?>("FbTime")
                        .HasColumnType("date");

                    b.Property<int?>("FbUser")
                        .HasColumnType("int");

                    b.Property<string>("Reply")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1)");

                    b.Property<DateTime?>("ReplyTime")
                        .HasColumnType("date");

                    b.HasKey("FeedbackId");

                    b.HasIndex("AccountUserId");

                    b.HasIndex("FbUser");

                    b.ToTable("Feedback", (string)null);
                });

            modelBuilder.Entity("ClinicManagement_hk3.Models.Machine", b =>
                {
                    b.Property<int>("MachineId")
                        .HasColumnType("int");

                    b.Property<int?>("CateId")
                        .HasColumnType("int");

                    b.Property<decimal?>("Cost")
                        .HasColumnType("decimal(18,0)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<int?>("Guarantee")
                        .HasColumnType("int");

                    b.Property<string>("Image")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("MachineName")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("Original")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(18,0)");

                    b.Property<string>("ProductCode")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("MachineId");

                    b.HasIndex("CateId");

                    b.ToTable("Machine", (string)null);
                });

            modelBuilder.Entity("ClinicManagement_hk3.Models.MachineCategory", b =>
                {
                    b.Property<int>("CateId")
                        .HasColumnType("int");

                    b.Property<string>("CateName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("CateId")
                        .HasName("PK__MachineC__27638D147F6F94C6");

                    b.ToTable("MachineCategory", (string)null);
                });

            modelBuilder.Entity("ClinicManagement_hk3.Models.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("OrderDate")
                        .HasColumnType("date");

                    b.Property<string>("State")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<decimal?>("TotalAmount")
                        .HasColumnType("decimal(18,0)");

                    b.Property<int?>("TotalQuantity")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("OrderId");

                    b.HasIndex("UserId");

                    b.ToTable("Order", (string)null);
                });

            modelBuilder.Entity("ClinicManagement_hk3.Models.OrderDetail", b =>
                {
                    b.Property<int>("OrderDetailId")
                        .HasColumnType("int");

                    b.Property<decimal?>("Amount")
                        .HasColumnType("decimal(18,0)");

                    b.Property<int?>("DrugId")
                        .HasColumnType("int");

                    b.Property<int?>("MachineId")
                        .HasColumnType("int");

                    b.Property<int?>("OrderId")
                        .HasColumnType("int");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("OrderDetailId");

                    b.HasIndex("DrugId");

                    b.HasIndex("MachineId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderDetail", (string)null);
                });

            modelBuilder.Entity("ClinicManagement_hk3.Models.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("Role1")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Role");

                    b.HasKey("RoleId");

                    b.ToTable("Role", (string)null);
                });

            modelBuilder.Entity("ClinicManagement_hk3.Models.staff", b =>
                {
                    b.Property<int>("StaffId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("FullName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Image")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("date");

                    b.HasKey("StaffId");

                    b.ToTable("Staff", (string)null);
                });

            modelBuilder.Entity("ClinicManagement_hk3.Models.Storage", b =>
                {
                    b.Property<int>("SlotId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ImportDate")
                        .HasColumnType("date")
                        .HasColumnName("Import_date");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("SlotId")
                        .HasName("PK__Storage__0A124AAF837CF8F5");

                    b.HasIndex("UserId");

                    b.ToTable("Storage", (string)null);
                });

            modelBuilder.Entity("ClinicManagement_hk3.Models.StorageDetail", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int?>("DrugId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnType("date")
                        .HasColumnName("Expiry_date");

                    b.Property<DateTime?>("ImportDate")
                        .HasColumnType("date")
                        .HasColumnName("Import_date");

                    b.Property<int?>("MachineId")
                        .HasColumnType("int");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.Property<int?>("SlotId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DrugId");

                    b.HasIndex("MachineId");

                    b.HasIndex("SlotId");

                    b.ToTable("StorageDetail", (string)null);
                });

            modelBuilder.Entity("ClinicManagement_hk3.Models.Account", b =>
                {
                    b.HasOne("ClinicManagement_hk3.Models.Role", "Role")
                        .WithMany("Accounts")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("FK__Accounts__RoleId__267ABA7A");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("ClinicManagement_hk3.Models.Drug", b =>
                {
                    b.HasOne("ClinicManagement_hk3.Models.DrugCategory", "Cate")
                        .WithMany("Drugs")
                        .HasForeignKey("CateId")
                        .HasConstraintName("FK__Drug__CateId__300424B4");

                    b.Navigation("Cate");
                });

            modelBuilder.Entity("ClinicManagement_hk3.Models.Education", b =>
                {
                    b.HasOne("ClinicManagement_hk3.Models.Account", "User")
                        .WithMany("Educations")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__Education__UserI__4222D4EF");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ClinicManagement_hk3.Models.EduDetail", b =>
                {
                    b.HasOne("ClinicManagement_hk3.Models.Education", "Edu")
                        .WithMany("EduDetails")
                        .HasForeignKey("EduId")
                        .HasConstraintName("FK__EduDetail__EduId__47DBAE45");

                    b.HasOne("ClinicManagement_hk3.Models.staff", "Staff")
                        .WithMany("EduDetails")
                        .HasForeignKey("StaffId")
                        .HasConstraintName("FK__EduDetail__Staff__46E78A0C");

                    b.Navigation("Edu");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("ClinicManagement_hk3.Models.Feedback", b =>
                {
                    b.HasOne("ClinicManagement_hk3.Models.Account", null)
                        .WithMany("FeedbackReplyUserNavigations")
                        .HasForeignKey("AccountUserId");

                    b.HasOne("ClinicManagement_hk3.Models.Account", "FbUserNavigation")
                        .WithMany("FeedbackFbUserNavigations")
                        .HasForeignKey("FbUser")
                        .HasConstraintName("FK__Feedback__FbUser__4AB81AF0");

                    b.Navigation("FbUserNavigation");
                });

            modelBuilder.Entity("ClinicManagement_hk3.Models.Machine", b =>
                {
                    b.HasOne("ClinicManagement_hk3.Models.MachineCategory", "Cate")
                        .WithMany("Machines")
                        .HasForeignKey("CateId")
                        .HasConstraintName("FK__Machine__CateId__2D27B809");

                    b.Navigation("Cate");
                });

            modelBuilder.Entity("ClinicManagement_hk3.Models.Order", b =>
                {
                    b.HasOne("ClinicManagement_hk3.Models.Account", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__Order__UserId__32E0915F");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ClinicManagement_hk3.Models.OrderDetail", b =>
                {
                    b.HasOne("ClinicManagement_hk3.Models.Drug", "Drug")
                        .WithMany("OrderDetails")
                        .HasForeignKey("DrugId")
                        .HasConstraintName("FK__OrderDeta__DrugI__35BCFE0A");

                    b.HasOne("ClinicManagement_hk3.Models.Machine", "Machine")
                        .WithMany("OrderDetails")
                        .HasForeignKey("MachineId")
                        .HasConstraintName("FK__OrderDeta__Machi__36B12243");

                    b.HasOne("ClinicManagement_hk3.Models.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .HasConstraintName("FK__OrderDeta__Order__37A5467C");

                    b.Navigation("Drug");

                    b.Navigation("Machine");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("ClinicManagement_hk3.Models.Storage", b =>
                {
                    b.HasOne("ClinicManagement_hk3.Models.Account", "User")
                        .WithMany("Storages")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__Storage__UserId__3A81B327");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ClinicManagement_hk3.Models.StorageDetail", b =>
                {
                    b.HasOne("ClinicManagement_hk3.Models.Drug", "Drug")
                        .WithMany("StorageDetails")
                        .HasForeignKey("DrugId")
                        .HasConstraintName("FK__StorageDe__DrugI__3D5E1FD2");

                    b.HasOne("ClinicManagement_hk3.Models.Machine", "Machine")
                        .WithMany("StorageDetails")
                        .HasForeignKey("MachineId")
                        .HasConstraintName("FK__StorageDe__Machi__3E52440B");

                    b.HasOne("ClinicManagement_hk3.Models.Storage", "Slot")
                        .WithMany("StorageDetails")
                        .HasForeignKey("SlotId")
                        .HasConstraintName("FK__StorageDe__SlotI__3F466844");

                    b.Navigation("Drug");

                    b.Navigation("Machine");

                    b.Navigation("Slot");
                });

            modelBuilder.Entity("ClinicManagement_hk3.Models.Account", b =>
                {
                    b.Navigation("Educations");

                    b.Navigation("FeedbackFbUserNavigations");

                    b.Navigation("FeedbackReplyUserNavigations");

                    b.Navigation("Orders");

                    b.Navigation("Storages");
                });

            modelBuilder.Entity("ClinicManagement_hk3.Models.Drug", b =>
                {
                    b.Navigation("OrderDetails");

                    b.Navigation("StorageDetails");
                });

            modelBuilder.Entity("ClinicManagement_hk3.Models.DrugCategory", b =>
                {
                    b.Navigation("Drugs");
                });

            modelBuilder.Entity("ClinicManagement_hk3.Models.Education", b =>
                {
                    b.Navigation("EduDetails");
                });

            modelBuilder.Entity("ClinicManagement_hk3.Models.Machine", b =>
                {
                    b.Navigation("OrderDetails");

                    b.Navigation("StorageDetails");
                });

            modelBuilder.Entity("ClinicManagement_hk3.Models.MachineCategory", b =>
                {
                    b.Navigation("Machines");
                });

            modelBuilder.Entity("ClinicManagement_hk3.Models.Order", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("ClinicManagement_hk3.Models.Role", b =>
                {
                    b.Navigation("Accounts");
                });

            modelBuilder.Entity("ClinicManagement_hk3.Models.staff", b =>
                {
                    b.Navigation("EduDetails");
                });

            modelBuilder.Entity("ClinicManagement_hk3.Models.Storage", b =>
                {
                    b.Navigation("StorageDetails");
                });
#pragma warning restore 612, 618
        }
    }
}
